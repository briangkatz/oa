// Leaflet map object
var map = L.map('map', {
    zoomControl: false,
    fullscreenControl: true
});

// Bounding box
var corner1 = L.latLng(55.253461463214126, -139.0196808469),
    corner2 = L.latLng(35.329795743702064, -111.463262),
    bounds = L.latLngBounds(corner1, corner2);
map.fitBounds([
    [49.3632412491, -126.0326203],
    [40.0219407235, -118.7486847531]
]);
map.options.minZoom = 6;
map.options.maxZoom = 15;
map.options.maxBounds = bounds;

// Leaflet zoom control
L.control.zoom({position: "bottomright"}).addTo(map);

$(document).ready(function() {
    $(".info").hide();
});

// Mapbox shellfish base map
var mapbox_shellfish = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjshza9xf1db51fqgpriounjs/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license.txt">Mapbox</a> Shellfish style | Grower data &copy; <a href="http://pcsga.org/search-our-growers/">PCSGA</a>',
    detectRetina: true,
    style: 'assets/style.json'
}).addTo(map);

// Mapbox satellite base map
var mapbox_satellite = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjhxps6ae204n2rpneg2yutrn/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license2.txt">Mapbox</a> Satellite Streets',
    detectRetina: true,
    style: 'assets/style2.json'
});

var grades = [0, 1, 2, 3, 4, 5];

var colors = chroma.scale(['#415F5D', '#A5BF15']).mode('hsl').colors(grades.length);

function getColor(d) {
    for (var i = 0; i < grades.length - 1; i++) {
        if ( d > grades[i] && d < grades[i+1] ) return colors[i];
    }
    if (d > grades[grades.length - 1]) return colors[grades.length];
}

// Set function for color ramp
var vulnColors = chroma.scale('OrRd').mode('lab').colors(4);

function setColor(vuln) {
    var id = 0;
    if (vuln === 4) { id = 3; }  // High (H/L)
    else if (vuln === 3) { id = 2; }  // Medium (H/H)
    else if (vuln === 2) { id = 1; }  // Medium (L/L)
    else  { id = 0; }  // Low (L/H)
    return vulnColors[id];
}

// Set style function that sets fill color property based on vulnerability group
function vulnStyle(feature) {
    return {
        fillColor: setColor(feature.properties.cluster),
        fillOpacity: 0.6,
        weight: 1,
        opacity: 1,
        color: '#000000',
        dashArray: '1'
    };
}

function style(feature) {
    return {
        weight: 2,
        opacity: 0,
        color: '#ffffff',
        dashArray: '10',
        fillOpacity: 0.25,
        fillColor: getColor(feature.properties.numstake)
    };
}

var estuaryColors = chroma.scale('Reds').mode('lab').colors(6);

function getColorEstuaries(troph) {
    var id = 0;
    if (troph === 5) { id = 5; }  // High
    else if (troph === 4) { id = 4; }  // Medium-High
    else if (troph === 3) { id = 3; }  // Medium
    else if (troph === 2) { id = 2; }  // Medium-Low
    else if (troph === 1) { id = 1; }  // Low
    else  { id = 0; }  // Undefined
    return estuaryColors[id];
}

function eutrophStyle(feature) {
    return {
        fillColor: getColorEstuaries(feature.properties.trophlevel),
        fillOpacity: 0.6,
        weight: 1,
        opacity: 1,
        color: '#000000',
        dashArray: '1'
    }
}

function highlightFeatureEstuaries(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#E0631D',
        fillColor: '#ffffff',
        fillOpacity: 0.8
    });
    layer.bringToFront();
}

function zoomToFeatureEstuaries(e) {
    map.fitBounds(e.target.getBounds());
}

function resetHighlightEstuaries(e) {
    estuaries.resetStyle(e.target);
    $(".info").hide();
}

function onEachFeatureEstuaries(feature, layer) {
    layer.on({
        mouseover: highlightFeatureEstuaries,
        click: zoomToFeatureEstuaries,
        mouseout: resetHighlightEstuaries
    });
    layer.bindTooltip('<h4>' + feature.properties.Name + '</h4><h6>Eutrophication Risk: ' + feature.properties.oec + '</h6>', {sticky: true, className: "feature-tooltip"});
}

function highlightFeature(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#E0631D',
        fillColor: '#ffffff',
        fillOpacity: 0.8
    });
    layer.bringToFront();
    // Select the update class, and update the content with the input value.
    $(".update").html('<b><h2>' + layer.feature.properties.name + '</b></h2>' + '<h1>Vulnerability to OA:</h1><b>Exposure: ' + layer.feature.properties.exposure + ' </b><br>' + '<b>Sensitivity: ' + layer.feature.properties.sensitivty + ' </b><br>' + '<b>Adaptive Capacity: ' + layer.feature.properties.adptvcapac + '</b>');
    $(".info").show();
}

function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
}

function resetHighlight(e) {
    vulnerability.resetStyle(e.target);
    $(".info").hide();
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        click: zoomToFeature,
        mouseout: resetHighlight
    });
}

function hexStyle(feature) {
    return {
        fillColor: '#ffffff',
        fillOpacity: 0.6,
        weight: 1,
        opacity: 1,
        color: '#000000',
        dashArray: '1'
    }
}

function highlightFeatureHexagon(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#E0631D',
        fillColor: '#ffffff',
        fillOpacity: 0.8
    });
    layer.bringToFront();
    // Select the update class, and update the content with the input value.
    $(".update").html('<b># Harvest Sites: ' + layer.feature.properties.hrvstSites + '</b><br><b># Monitoring: ' + layer.feature.properties.monitoring + '</b><br><b># Research Projects: ' + layer.feature.properties.oahProjs + '</b><br><b>Yield probability: TBD</b>');
    $(".info").show();
}

function zoomToFeatureHexagon(e) {
    map.fitBounds(e.target.getBounds());
}

function resetHighlightHexagon(e) {
    hexagons.resetStyle(e.target);
    $(".info").hide();
}

function onEachFeatureHexagon(feature, layer) {
    layer.on({
        mouseover: highlightFeatureHexagon,
        click: zoomToFeatureHexagon,
        mouseout: resetHighlightHexagon
    });
}

// Estuaries/Eutrophication
var estuaries = null;
estuaries = L.geoJson.ajax("assets/data/estuaries.geojson", {
    style: eutrophStyle,
    onEachFeature: onEachFeatureEstuaries
});

// Vulnerability Watersheds
var vulnerability = null;
vulnerability = L.geoJson.ajax("assets/data/vulnerability_watersheds.geojson", {
    style: vulnStyle,
    onEachFeature: onEachFeature
});

// Hexagonal Grid
var hexagons = null;
hexagons = L.geoJson.ajax("assets/data/hexagons.geojson", {
    style: hexStyle,
    onEachFeature: onEachFeatureHexagon
});

// Define legend
var legend = L.control({position: 'bottomright'});
// Set legend color scale and breaks
legend.onAdd = function () {
    var div = L.DomUtil.create('div', 'legend legend-colors');
    div.innerHTML += '<b># Months Below &Omega;<sub>ar</sub> 1.5 (2050)</b><br /><br>';
    div.innerHTML += '<i style="background: ' + '#E0631D' + '; opacity: 1"></i><p>7-8</p>';
    div.innerHTML += '<i style="background: ' + '#A5BF15' + '; opacity: 1"></i><p>5-6</p>';
    div.innerHTML += '<i style="background: ' + '#E3ED00' + '; opacity: 1"></i><p>3-4</p>';
    div.innerHTML += '<i style="background: ' + '#ffffff' + '; opacity: 1"></i><p> 1-2</p>';
    return div;
};

// Scale bar
L.control.scale({position: 'bottomright'}).addTo(map);

// Fly to Function
function home() {  // Reset Map View
    map.fitBounds([
        [49.023461463214126, -126.36474609375],
        [40.329795743702064, -121.53076171875]
    ])
}

function fly1() {  // Washington
    map.fitBounds([
        [49, -124.5],
        [46.03, -121.39]
    ])
}

function fly2() {  // Oregon
    map.fitBounds([
        [46.17, -124.42],
        [41.59, -123.19]
    ])
}

function fly3() {  // California
    map.fitBounds([
        [42.0007748398, -125.4055220452],
        [40.2741947879, -123.1752974358]
    ])
}

function fly5() {  // North Puget Sound
    map.fitBounds([
        [49, -123.11],
        [48.11, -122.09]
    ])
}

function fly6() {  // South Puget Sound
    map.fitBounds([
        [48.11, -123.11],
        [47, -122.1]
    ])
}

// function fly7() {  // Juan de Fuca Strait
//     map.fitBounds([
//         [48.3649, -124.4504],
//         [47.5921, -122.3947]
//     ])
// }

function fly8() {  // Washington Coast
    map.fitBounds([
        [48.24, -125.06],
        [46.11, -123.35]
    ])
}

function fly9() {  // Northern Oregon Coast
    map.fitBounds([
        [46.02, -124.18],
        [44.9, -123.35]
    ])
}
function fly10() {  // Central Oregon Coast
    map.fitBounds([
        [44.3856, -124.3714],
        [43.1641, -123.4847]
    ])
}

function fly11() {  // Southern Oregon Coast
    map.fitBounds([
        [43.16, -124.53],
        [41.59, -124.04]
    ])
}

function fly12() {  // Northern California Coast
    map.fitBounds([
        [42.0007748398, -125.4055220452],
        [40.2741947879, -123.1752974358]
    ])
}

// Coordinated view geovisualization
var arag_events = d3.json('assets/data/corrosive_arag_nearshore.geojson').then(function(data) {

    var filter = crossfilter(data.features);

    var all = filter.groupAll();

    var everything = filter.dimension(function(d) {
        return d
    });

    var geomDimension = filter.dimension(function(d) {
        return d.geometry
    });

    var magDimension = filter.dimension(function(d) {
        var min_arag = d.properties.min_arag;
        return min_arag < 0.9 ? '0.75-0.90' :
            min_arag < 1.05 ? '0.90-1.05' :
                min_arag < 1.2 ? '1.05-1.20' :
                    min_arag < 1.35 ? '1.20-1.35' :
                        '1.35-1.40'
    });

    var depthDimension = filter.dimension(function(d) {
        var freq = d.properties.freq;
        return freq < 5 ? '0.00-0.05' :
            freq < 10 ? '0.05-0.10' :
                freq < 15 ? '0.10-0.15' :
                    freq < 20 ? '0.15-0.20' :
                        '>0.20'
    });

    var dateDimension = filter.dimension(function(d) {

        return d3.timeDay(new Date(d.properties.time_max));
    });

    var magDimensionGroup = magDimension.group();

    var depthDimensionGroup = depthDimension.group();

    var dateDimensionGroup = dateDimension.group(); //

    var geoJsonLayer = L.geoJson({
        type: 'FeatureCollection',
        features: geomDimension.top(Infinity)
    }, {
        pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
                radius: Math.pow(feature.properties.min_arag, -5) * 5,
                fillColor: "red",
                color: "#fff",
                weight: 5,
                stroke: false,
                opacity: 0.5,
                fillOpacity: 0.5
            })
        },
        onEachFeature: function(feature, layer) {
            layer.bindTooltip("&Omega; Aragonite: " + feature.properties.min_arag.toString());
        }
        }).addTo(map);

    var magChart = dc.barChart('#mag-chart');

    magChart
        .height(150)
        .margins({
            top: 10,
            right: 10,
            bottom: 40,
            left: 40
        })
        .dimension(magDimension)
        .group(magDimensionGroup)
        .elasticY(true)
        .x(d3.scaleOrdinal())
        .xUnits(dc.units.ordinal)
        .yAxis()
        .ticks(3);

    var depthChart = dc.barChart('#depth-chart');

    depthChart
        .height(150)
        .margins({
            top: 10,
            right: 10,
            bottom: 40,
            left: 40
        })
        .dimension(depthDimension)
        .group(depthDimensionGroup)
        .elasticY(true)
        .x(d3.scaleOrdinal())
        .xUnits(dc.units.ordinal)
        .yAxis()
        .ticks(3);


    var dateChart = dc.lineChart('#date-chart');

    dateChart
        .renderArea(true)
        .height(150)
        .transitionDuration(1000)
        .margins({
            top: 10,
            right: 10,
            bottom: 40,
            left: 40
        })
        .dimension(dateDimension)
        .group(dateDimensionGroup)
        .elasticY(true)
        .yAxisPadding('40%')
        .x(d3.scaleTime().domain([new Date(1994, 12), new Date(2051, 1)]))
        .xUnits(d3.timeYears);

    dc.renderAll();

    dateChart.renderlet(function (chart) {
        // Rotate x-axis labels
        chart.selectAll('g.x text')
            .attr('transform', 'translate(-10,10) rotate(315)');
        chart.selectAll('g.y text')
            .attr('line-height', '3')
    });

    function updateMapFilter() {
        geomDimension.filter(function(d) {
            return map.getBounds().contains(L.geoJSON(d).getBounds())
        });
        dc.redrawAll();
    }

    function updateMap() {
        geoJsonLayer.clearLayers();
        geoJsonLayer.addData({
            type: 'FeatureCollection',
            features: everything.top(Infinity)
        });
    }

    map.on('zoomend moveend', function() {
        updateMapFilter();
    });

    magChart.on('filtered', function(chart, filter) {
        updateMap()
    });

    depthChart.on('filtered', function(chart, filter) {
        updateMap()
    });

    dateChart.on('filtered', function(chart, filter) {
        updateMap()
    });

});

var stakeholders = L.geoJson.ajax('assets/data/stakeholders.geojson', {
    pointToLayer: function(feature, latlng) {
        return L.circleMarker(latlng, {
            radius: 40,
            fillColor: "#738D2B",
            color: "#000",
            weight: 1,
            stroke: false,
            opacity: 0.01,
            fillOpacity: 0.1
        })
    }
});

var projects = L.geoJson.ajax('assets/data/oah_projects.geojson', {
    pointToLayer: function (feature, latlng) {
        return L.circleMarker(latlng, {
            radius: 40,
            fillColor: "#08048d",
            color: "#000",
            weight: 1,
            stroke: false,
            opacity: 0.01,
            fillOpacity: 0.04
        })
    },
    onEachFeature: function (feature, layer) {
        layer.bindTooltip(feature.properties.project, {sticky: true, className: "feature-tooltip"});
    }
});

// Layer control
var estuary_layer = L.layerGroup([estuaries]);
var hexGrid = L.layerGroup([hexagons]);
var vulnWatersheds = L.layerGroup([vulnerability]);
var stakeholder_groups = L.layerGroup([stakeholders]);
var ac_projects = L.layerGroup([projects]);

var base_maps = {
    "Shellfish": mapbox_shellfish,
    "Satellite": mapbox_satellite
};

var vulnerability_layers = {
    "Exposure": estuary_layer,
    "Sensitivity": stakeholder_groups,
    "Adaptive Capacity": ac_projects,
    "Combined Vulnerability": vulnWatersheds,
    "Yield Probability": hexGrid
};

L.control.layers(base_maps, vulnerability_layers, {
        position: 'topright',
        collapsed: true
    }).addTo(map);

$("#sidenavToggler").click(function() {
    $(this).toggleClass("sidenavToggler-right-border");
    $("div .dc-chart").toggleClass("dc-hide");
    $(".dc").toggleClass("dc-hide");
});

$('.dc-chart svg').ready(function() {
    setTimeout(function() {
        $('.dc').css("display", "block");
    }, 500);
});
