var colorsWatershed = chroma.scale('Oranges').mode('lab').colors(5);

function setColorWatershed(delta_arag) {
    var id = 0;
    if (delta_arag <= -0.2587) { id = 4; }
    else if (-0.2587 < delta_arag && delta_arag <= -0.2329) { id = 3; }
    else if (-0.2329 < delta_arag && delta_arag <= -0.2228) { id = 2; }
    else if (-0.2228 < delta_arag && delta_arag <= -0.2081) { id = 1; }
    else  { id = 0; }  // -0.2081 < delta_arag && delta_arag <= -0.1851
    return colorsWatershed[id];
}

function styleWatershed(feature) {
    return {
        fillColor: setColorWatershed(feature.properties.delta_mean_arag_t1t2.toFixed(4)),
        fillOpacity: 0.6,
        weight: 1,
        opacity: 1,
        color: '#000000',
        dashArray: '2, 2',
        dashOffset: '2'
    };
}

var colorsVuln = chroma.scale('Oranges').mode('lab').colors(4);

function setColorVuln(vuln) {
    var id = 0;
    if (vuln === 4) { id = 3; }  // High (H/L)
    else if (vuln === 3) { id = 2; }  // Medium (H/H)
    else if (vuln === 2) { id = 1; }  // Medium (L/L)
    else  { id = 0; }  // Low (L/H)
    return colorsVuln[id];
}

function styleVuln(feature) {
    return {
        fillColor: setColorVuln(feature.properties.cluster),
        fillOpacity: 0.6,
        weight: 1,
        opacity: 1,
        color: '#000000',
        dashArray: '2, 2',
        dashOffset: '2'
    };
}

function highlightFeatureEstuary(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#ffffff',
        fillColor: '#6b8e3a',
        fillOpacity: 0.95,
        dashArray: '1',
        dashOffset: '0'
    });
    layer.bringToFront();
    // Select the update class, and update the content with the input value.
    layer.bindTooltip(layer.feature.properties.nca_name, {sticky: true, className: "feature-tooltip"});
}

function resetHighlightFeatureEstuary(e) {
    layers.estuaries.layer.resetStyle(e.target);
    $(".info").hide();
}

function onEachFeatureEstuary(feature, layer) {
    layer.on({
        mouseover: highlightFeatureEstuary,
        mouseout: resetHighlightFeatureEstuary
    });
}

function highlightFeatureWatershed(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#ffffff',
        fillOpacity: 0.95,
        dashArray: '1',
        dashOffset: '0'
    });
    layer.bringToFront();
    // Select the update class, and update the content with the input value.
    $(".updateWatershed").html('<h2>' + layer.feature.properties.NAME + '</h2>' + '<h2>&Delta;<sub>&Omega;<sub>ar</sub></sub> = ' + (layer.feature.properties.delta_mean_arag_t1t2).toFixed(4) + '</h2>');
    $(".infoWatershed").show();
}

function resetHighlightWatershed(e) {
    layers.watersheds_pnw.layer.resetStyle(e.target);
    $(".infoWatershed").hide();
}

function onEachFeatureWatershed(feature, layer) {
    layer.on({
        mouseover: highlightFeatureWatershed,
        mouseout: resetHighlightWatershed
    });
//    layer.bindTooltip('<h2>' + feature.properties.NAME + '</h2>' + '<h2><b>' + (layer.feature.properties.delta_mean_arag_t1t2 * 100).toFixed(2) + '%</b></h2>', {sticky: true, className: "feature-tooltip"});
}

function highlightFeatureVuln(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#ffffff',
        fillOpacity: 0.95,
        dashArray: '1',
        dashOffset: '0'
    });
    layer.bringToFront();
    // Select the update class, and update the content with the input value.
    $(".update").html('<h2><b>' + layer.feature.properties.name + '</b></h2><p>Exposure: ' + layer.feature.properties.exposure + ' </p>' + '<p>Sensitivity: ' + layer.feature.properties.sensitivty + ' </p>' + '<p>Adaptive Capacity: ' + layer.feature.properties.adptvcapac + '</p>');
    $(".info").show();
}

function resetHighlightFeatureVuln(e) {
    layers.vulnerability_watersheds.layer.resetStyle(e.target);
    $(".info").hide();
}

function onEachFeatureVuln(feature, layer) {
    layer.on({
        mouseover: highlightFeatureVuln,
        mouseout: resetHighlightFeatureVuln
    });
    // layer.bindTooltip('<h2>' + feature.properties.name + '</h2><h2 class="subtitle">Vulnerability to OA</h2><br><p>Exposure: ' + layer.feature.properties.exposure + ' </p><br>' + '<p>Sensitivity: ' + layer.feature.properties.sensitivty + ' </p><br>' + '<p>Adaptive Capacity: ' + layer.feature.properties.adptvcapac + '</p>', {sticky: true, className: "feature-tooltip"});
}

amplifierPoints = amplifierPoints.map(function (p) { return [p["geometry"]["coordinates"][1], p["geometry"]["coordinates"][0]]; });
stakeholderPoints = stakeholderPoints.map(function (p) { return [p["geometry"]["coordinates"][1], p["geometry"]["coordinates"][0]]; });

var legend_forestry = '<i style="background: #00e03c; opacity: 0.5"></i><p><b>Forestry</b></p>';
var legend_cattle = '<i style="background: #dde000; opacity: 0.5"></i><p><b>Cattle</b></p>';
var legend_estuaries = '<i style="background: #6b8e3a; opacity: 0.5"></i><p>Estuaries</p>';
var legend_habs = '<i style="background: #ff003b; opacity: 0.5"></i><p>Harmful algal blooms</p>';
var legend_agricultural = '<i style="background: #6b8e3a; opacity: 0.5"></i><p>Agricultural land use</p>';
var legend_industrial = '<i style="background: #486081; opacity: 0.5"></i><p>Industrial land use</p>';
var legend_freshwater = '<i style="background: #685a40; opacity: 0.5"></i><p>Freshwater discharge</p>';
var legend_harvest_sites = '<i style="background: #00ff00; opacity: 0.5"></i><p>Harvest sites</p>';
var legend_stakeholders = '<i style="background: #ff00ff; opacity: 0.5"></i><p>Stakeholders</p>';
var legend_funded_projects = '<i style="background: #2c8b19; opacity: 0.5"></i><p>Funded projects</p>';
var legend_vulnerability_watersheds = 'Vulnerability to OA*<br />' +
    '<i style="background: ' + colorsVuln[3] + '; opacity: 0.5;"></i><p>High (H/L)</p>' +
    '<i style="background: ' + colorsVuln[2] + '; opacity: 0.5"></i><p>Medium (H/H)</p>' +
    '<i style="background: ' + colorsVuln[1] + '; opacity: 0.5"></i><p>Medium (L/L)</p>' +
    '<i style="background: ' + colorsVuln[0] + '; opacity: 0.5"></i><p>Low (L/H)</p>' +
    '<b class="disclaimer">*Vulnerability estimated by High/Low exposure & sensitivity and High/Low adaptive capacity</b><br />' +
    '<div class="info">\n' + '<div class="update"><h2>Coastal watersheds of the Pacific Northwest, clustered by differential vulnerability of shellfisheries to ocean acidification</h2></div>\n' + '</div>';
var legend_watersheds_pnw = '<b>Change in 30-year mean aragonite saturation state, 1995-2025 vs. 2020-2050 (&Delta;<sub>&Omega;<sub>ar</sub></sub>)</b><br><br>' +
    '<i style="background: ' + colorsWatershed[4] + '; opacity: 0.5;"></i><p><= -0.2587</p>' +
    '<i style="background: ' + colorsWatershed[3] + '; opacity: 0.5;"></i><p><= -0.2329</p>' +
    '<i style="background: ' + colorsWatershed[2] + '; opacity: 0.5"></i><p><= -0.2228</p>' +
    '<i style="background: ' + colorsWatershed[1] + '; opacity: 0.5"></i><p><= -0.2081</p>' +
    '<i style="background: ' + colorsWatershed[0] + '; opacity: 0.5"></i><p><= -0.1851</p>' +
    '<br><b class="disclaimer">Worsening ocean acidification is projected as a long-term decline in aragonite saturation state</b>' +
    '<div class="infoWatershed"><div class="updateWatershed"></div></div>';

var legend_amplifier_points = '<i style="background: linear-gradient(to top, blue 0%, yellow 50%, red 100%); opacity: 0.5"></i><p><b>Reported OA risk factors</b></p>';
var legend_stakeholder_points = '<i style="background: #ff003b; opacity: 0.5"></i><p><b>Stakeholders</b></p>';

var layers = {
    shellfish: {
        layer: L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjshza9xf1db51fqgpriounjs/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA')
    },
    shellfish2: {
        layer: L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/ck86ipeux087b1imd7iszin9d/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA')
    },
    satellite: {
        layer: L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
            id: 'mapbox.satellite'
        })
    },
    dark: {
        layer: L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
            id: 'mapbox.dark'
        })
    },
    watersheds_pnw: {
        layer: L.geoJson.ajax("assets/watersheds_pnw.geojson", {
            style: styleWatershed,
            onEachFeature: onEachFeatureWatershed
        }),
        legend: legend_watersheds_pnw
    },
    estuaries: {
        layer: L.geoJson.ajax('assets/estuaries.geojson', {
            color: 'white',
            weight: 2,
            opacity: 0.0,
            onEachFeature: onEachFeatureEstuary
        }),
        legend: legend_estuaries
    },
    stakeholder_points: {
        layer: L.heatLayer(stakeholderPoints, {
            minOpacity: 0.4,
            maxZoom: 18,
            radius: 25,
            blur: 15,
            max: 0.5
        }),
        legend: legend_stakeholder_points
    },
    amplifier_points: {
        layer: L.heatLayer(amplifierPoints, {
            minOpacity: 0.4,
            maxZoom: 18,
            radius: 25,
            blur: 15,
            max: 0.5,
            gradient: {0.4: 'blue', 0.6: 'yellow', 0.85: 'red'}
        }),
        legend: legend_amplifier_points
    },
    habs: {
        layer: L.geoJson.ajax('assets/habs.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: feature.properties.frequency * 10 + 10,
                    fillColor: "#ff003b",
                    color: "#000000",
                    weight: 5,
                    stroke: false,
                    opacity: 0.5,
                    fillOpacity: feature.properties.intensity / 5 + 0.15
                })
            },
            onEachFeature: function (feature, layer) {
                layer.bindTooltip('Intensity: ' + feature.properties.intensity.toString() + '<br>Frequency: ' + feature.properties.frequency.toString(), {sticky: true, className: "feature-tooltip"});
            }
        }),
        legend: legend_habs
    },
    agricultural: {
        layer: L.geoJson.ajax('assets/agricultural_landuse.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: feature.properties.frequency * 10 + 10,
                    fillColor: "#6b8e3a",
                    color: "#000000",
                    weight: 5,
                    stroke: false,
                    opacity: 0.5,
                    fillOpacity: feature.properties.intensity / 5 + 0.15
                })
            },
            onEachFeature: function (feature, layer) {
                layer.bindTooltip('Intensity: ' + feature.properties.intensity.toString() + '<br>Frequency: ' + feature.properties.frequency.toString(), {sticky: true, className: "feature-tooltip"});
            }
        }),
        legend: legend_agricultural
    },
    industrial: {
        layer: L.geoJson.ajax('assets/industrial_landuse.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: feature.properties.frequency * 10 + 10,
                    fillColor: "#486081",
                    color: "#000000",
                    weight: 5,
                    stroke: false,
                    opacity: 0.5,
                    fillOpacity: feature.properties.intensity / 5 + 0.15
                })
            },
            onEachFeature: function (feature, layer) {
                layer.bindTooltip('Intensity: ' + feature.properties.intensity.toString() + '<br>Frequency: ' + feature.properties.frequency.toString(), {sticky: true, className: "feature-tooltip"});
            }
        }),
        legend: legend_industrial
    },
    freshwater: {
        layer: L.geoJson.ajax('assets/freshwater_discharge.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: feature.properties.frequency * 10 + 10,
                    fillColor: "#685a40",
                    color: "#000000",
                    weight: 5,
                    stroke: false,
                    opacity: 0.5,
                    fillOpacity: feature.properties.intensity / 5 + 0.15
                })
            },
            onEachFeature: function (feature, layer) {
                layer.bindTooltip('Intensity: ' + feature.properties.intensity.toString() + '<br>Frequency: ' + feature.properties.frequency.toString(), {sticky: true, className: "feature-tooltip"});
            }
        }),
        legend: legend_freshwater
    },
    harvest_sites: {
        layer: L.geoJson.ajax('assets/harvest_sites.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: 4,
                    fillColor: "#00ff00",
                    stroke: false,
                    fillOpacity: 0.05
                })
            }
        }),
        legend: legend_harvest_sites
    },
    stakeholders: {
        layer: L.geoJson.ajax('assets/stakeholders.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: 4,
                    fillColor: "#ff00ff",
                    stroke: false,
                    fillOpacity: 0.25
                })
            },
        }),
        legend: legend_stakeholders
    },
    funded_projects: {
        layer: L.geoJson.ajax('assets/funded_projects.geojson', {
            pointToLayer: function (feature, latlng) {
                return L.circleMarker(latlng, {
                    radius: 4,
                    fillColor: "#2c8b19",
                    stroke: false,
                    fillOpacity: 0.25
                })
            },
            onEachFeature: function (feature, layer) {
                layer.bindTooltip(feature.properties.project, {sticky: true, className: "feature-tooltip"});
            }
        }),
        legend: legend_funded_projects
    },
    vulnerability_watersheds: {
        layer: L.geoJson.ajax("assets/vulnerability_watersheds.geojson", {
            style: styleVuln,
            onEachFeature: onEachFeatureVuln
        }),
        legend: legend_vulnerability_watersheds
    }
};

var scenes = {
    landing: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Landing'},
    vulnerability_intro: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Intro', layers: [layers.estuaries, layers.shellfish]},
    exposure: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Exposure', layers: [layers.watersheds_pnw, layers.shellfish2]},
    sensitivity: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Sensitivity', layers: [layers.harvest_sites, layers.stakeholders, layers.estuaries, layers.shellfish]},
    adaptive_capacity: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Adaptive Capacity', layers: [layers.funded_projects, layers.shellfish]},
    vulnerability_combined: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Combined', layers: [layers.vulnerability_watersheds, layers.shellfish]},
    regional_assessment: {lat: 44.75, lng: -123.75, zoom: 7, name: 'Assessment'}
};

$('#storymap').storymap({
    scenes: scenes,
    baselayer: layers.shellfish,
    navbar: true,
    legend: true,
    credits: "",
    loader: true,
    scalebar: true,
    flyto: true,
    navwidget: true,

    createMap: function () {
        // Create a map in the "map" div, set the view to a given place and zoom
        var map = L.map($(".storymap-map")[0], {
            zoomControl: false,
            scrollWheelZoom: false,
            fadeAnimation: true,
            zoomAnimation: true
        }).setView([45, -124], 6);

        return map;
    }
});

// Create Leaflet map object, set map center and zoom level
var oa_map = L.map('oa-map', {minZoom:5,maxZoom:6,zoomControl:true,scrollWheelZoom:false}).setView([42, -124], 5);

L.control.scale({
    position: "bottomleft",
    metric: false
}).addTo(oa_map);

var t1 = L.tileLayer('assets/avg_arag_1995-2025/{z}/{x}/{y}.png', {
  minZoom: 5,
  maxZoom: 6,
  tms: false,
  attribution: 'Generated by QTiles'
}).addTo(oa_map);

var t2 = L.tileLayer('assets/avg_arag_2020-2050/{z}/{x}/{y}.png', {
  minZoom: 5,
  maxZoom: 6,
  tms: false,
  attribution: 'Generated by QTiles'
}).addTo(oa_map);

L.control.sideBySide(t1, t2).addTo(oa_map);

layers.shellfish.layer.addTo(oa_map);

function setColorArag(mean_arag) {
    var id = 0;
    if (1.2511 <= mean_arag && mean_arag < 1.8936) { id = 4; }
    else if (1.8936 <= mean_arag && mean_arag < 2.1332) { id = 3; }
    else if (2.1332 <= mean_arag && mean_arag < 2.2867) { id = 2; }
    else if (2.2867 <= mean_arag && mean_arag < 2.4780) { id = 1; }
    else  { id = 0; }  // 2.4780 <= mean_arag && mean_arag < 2.9231
    return colorsWatershed[id];
}

var legend = L.control({position: 'bottomleft'});
legend.onAdd = function (oa_map) {

var div = L.DomUtil.create('div', 'info legend legend-custom');
div.innerHTML += '<b>OA climate change (30-year mean &Omega;<sub>ar</sub>), 1995-2025 (left) vs. 2020-2050 (right)</b><br>' +
    '<i style="background: ' + colorsWatershed[4] + '; opacity: 0.5;"></i><p>1.2511 <= &Omega; < 1.8936</p>' +
    '<i style="background: ' + colorsWatershed[3] + '; opacity: 0.5;"></i><p>1.8936 <= &Omega; < 2.1332</p>' +
    '<i style="background: ' + colorsWatershed[2] + '; opacity: 0.5"></i><p>2.1332 <= &Omega; < 2.2867</p>' +
    '<i style="background: ' + colorsWatershed[1] + '; opacity: 0.5"></i><p>2.2867 <= &Omega; < 2.4780</p>' +
    '<i style="background: ' + colorsWatershed[0] + '; opacity: 0.5"></i><p>2.4780 <= &Omega; < 2.9231</p>'
return div;
};
legend.addTo(oa_map);

//(function (i, s, o, g, r, a, m) {
//    i['GoogleAnalyticsObject'] = r;
//    i[r] = i[r] || function () {
//        (i[r].q = i[r].q || []).push(arguments)
//    }, i[r].l = 1 * new Date();
//    a = s.createElement(o),
//        m = s.getElementsByTagName(o)[0];
//    a.async = 1;
//    a.src = g;
//    m.parentNode.insertBefore(a, m)
//})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
//
//ga('create', 'UA-110256930-2', 'auto');
//ga('send', 'pageview');
