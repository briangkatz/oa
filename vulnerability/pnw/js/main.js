/* MAP */

// Leaflet map object
var map = L.map('map', {
    zoomControl: false,
    fullscreenControl: true,
    preferCanvas: true  // This allows thousands of points to be rendered quickly
});
// Set bounding box
var corner1 = L.latLng(55.253461463214126, -139.0196808469),  // upper left point (max)
    corner2 = L.latLng(35.329795743702064, -111.463262),  // lower right point (max)
    bounds = L.latLngBounds(corner1, corner2);
// Set limits on zoom levels and bounds
map.options.minZoom = 6;
map.options.maxZoom = 15;
map.options.maxBounds = bounds;
// Set initial bounds
map.fitBounds([
    [49.3632412491, -126.0326203],  // upper left point (initial)
    [40.0219407235, -118.7486847531]  // lower right point (initial)
]);
// Add zoom control
L.control.zoom({position: "bottomright"}).addTo(map);
// Add scale bar
L.control.scale({position: 'bottomright'}).addTo(map);

/* BASE MAP LAYERS */

// Custom Mapbox PNW shellfish base map
var mapbox_shellfish = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjshza9xf1db51fqgpriounjs/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license.txt">Mapbox</a> | Grower data &copy; <a href="https://pcsga.org/search-our-growers/">PCSGA</a>',
    detectRetina: true,
    style: 'assets/style.json'
}).addTo(map);
// Mapbox satellite base map
var mapbox_satellite = L.tileLayer('https://api.mapbox.com/styles/v1/katzbr/cjhxps6ae204n2rpneg2yutrn/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia2F0emJyIiwiYSI6ImNqOHhmMnBucDIwZm4ycW8ya2d5cHF0cmsifQ.8rcjz0DyWs_ncWfOZ0VwKA', {
    attribution: 'Created by <a href="https://github.com/briangkatz/">Brian G. Katz</a> | <a href="assets/license2.txt">Mapbox</a> | Grower data &copy; <a href="https://pcsga.org/search-our-growers/">PCSGA</a>',
    detectRetina: true,
    style: 'assets/style2.json'
});

/* COLORS */

// Color by ordinal data
// Set grades for color break points by data attributes
var grades = [0, 1, 2, 3, 4, 5];
// Set color ramp
var colors = chroma.scale(['#415F5D', '#A5BF15']).mode('hsl').colors(grades.length);
// Assign color based on data attributes
function getColor(d) {
    for (var i = 0; i < grades.length - 1; i++) {
        if (d > grades[i] && d < grades[i + 1]) return colors[i];
    };
    if (d > grades[grades.length - 1]) return colors[grades.length];
};
// Style features by setting fill color property based on data attributes
function style(feature) {
    return {
        fillColor: getColor(feature.properties.numstake),
        fillOpacity: 0.25,
        weight: 2,
        color: '#ffffff',  // stroke color
        opacity: 0,  // stroke opacity
        dashArray: '10'
    };
};

// Color by nominal data
// Set color ramp
var vulnColors = chroma.scale('Oranges').mode('lab').colors(4);
// Assign color based on data attributes
function setColor(vuln) {
    var id = 0;
    if (vuln === 4) { id = 3; }  // High (H/L)
    else if (vuln === 3) { id = 2; }  // Medium (H/H)
    else if (vuln === 2) { id = 1; }  // Medium (L/L)
    else  { id = 0; }  // Low (L/H)
    return vulnColors[id];
};
// Style features by setting fill color property based on data attributes
function vulnStyle(feature) {
    return {
        fillColor: setColor(feature.properties.cluster),
        fillOpacity: 0.6,
        weight: 1,
        color: '#000000',  // stroke color
        opacity: 1,  // stroke opacity
        dashArray: '1'
    };
};

// Set grades for color break points by data attributes
var exposure_ROC_grades = [-0.19, -0.21, -0.22, -0.23, -0.26];
var exposure_baseline_grades = [2.22, 1.97, 1.82, 1.58, 1.51];
// Set color ramp
var exposureColors = chroma.scale('Oranges').mode('lab').colors(5);
// Assign color based on data attributes
function getColorExposureROC(d1, d2) {
    var d = (d2 - d1).toFixed(2);  // change in 30-yr mean aragonite
    for (var i = 0; i < exposure_ROC_grades.length - 1; i++) {
        if (d <= exposure_ROC_grades[i] && d > exposure_ROC_grades[i + 1]) return exposureColors[i];
    }
    if (d <= exposure_ROC_grades[exposure_ROC_grades.length - 1]) return exposureColors[exposure_ROC_grades.length - 1];
};
// Style features by setting fill color property based on data attributes
function exposureROCstyle(feature) {
    return {
        fillColor: getColorExposureROC(feature.properties.arag_t1, feature.properties.arag_t2),
        fillOpacity: 0.6,
        weight: 1,
        color: '#000000',  // stroke color
        opacity: 1,  // stroke opacity
        dashArray: '2, 2',
        dashOffset: '2'
    };
};

/* INTERACTIVITY */

// Set style for highlighting features
function highlightFeatureWatersheds_exposure_ROC(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 2,
        opacity: 0.8,
        color: '#ffffff',
        fillOpacity: 0.95,
        dashArray: '1',
        dashOffset: '0'
    });
    layer.bringToFront();
};
// Set "Zoom to Layer" property
function zoomToFeatureWatersheds_exposure_ROC(e) {
    map.fitBounds(e.target.getBounds());
};
// Set reset function to remove highlighted style and info window
function resetHighlightWatersheds_exposure_ROC(e) {
    watersheds_exposure_ROC.resetStyle(e.target);
    $(".info").hide();
};
// Assign the interactive functions defined above to mouse events
function onEachFeatureWatersheds_exposure_ROC(feature, layer) {
    layer.on({
        mouseover: highlightFeatureWatersheds_exposure_ROC,
        click: zoomToFeatureWatersheds_exposure_ROC,
        mouseout: resetHighlightWatersheds_exposure_ROC
    });
    // Add tooltip information
    layer.bindTooltip('<h4>' + layer.feature.properties.NAME + '</h4>' + '<h4>&Delta;<sub>&Omega;<sub>ar</sub></sub> = ' + (layer.feature.properties.arag_t2 - layer.feature.properties.arag_t1).toFixed(2) + '</h4>', {sticky: true, className: "feature-tooltip"});
};

// Set style for highlighting features
function highlightFeature(e) {
    var layer = e.target;
    layer.setStyle({
        fillColor: '#ffffff',
        fillOpacity: 0.8,
        weight: 2,
        color: '#E0631D',
        opacity: 0.8
    });
    layer.bringToFront();
    // Update content within info window
    $(".update").html('<b><h2>' + layer.feature.properties.name + '</b></h2>' + '<h1>Vulnerability to OA:</h1><b>Exposure: ' + layer.feature.properties.exposure + ' </b><br>' + '<b>Sensitivity: ' + layer.feature.properties.sensitivty + ' </b><br>' + '<b>Adaptive Capacity: ' + layer.feature.properties.adptvcapac + '</b>');
    $(".info").show();
};
// Set "Zoom to Layer" property
function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
};
// Set reset function to remove highlighted style and info window
function resetHighlight(e) {
    vulnerability.resetStyle(e.target);
    $(".info").hide();
};
// Assign the interactive functions defined above to mouse events
function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        click: zoomToFeature,
        mouseout: resetHighlight
    });
};

/* DATA LAYERS */

// Watersheds by exposure to OA (delta mean aragonite)
var watersheds_exposure_ROC = null;
watersheds_exposure_ROC = L.geoJson.ajax("assets/data/watersheds_pnw.geojson", {
    style: exposureROCstyle,
    onEachFeature: onEachFeatureWatersheds_exposure_ROC
});

// Watersheds by vulnerability to OA
var vulnerability = null;
vulnerability = L.geoJson.ajax("assets/data/vulnerability_watersheds.geojson", {
    style: vulnStyle,
    onEachFeature: onEachFeature
});

/* LEGEND */

// Create legend
var exposureROClegend = L.control({position: 'bottomright'});
// Set legend colors and labels
exposureROClegend.onAdd = function () {
    var div = L.DomUtil.create('div', 'legend legend-colors');
    div.innerHTML += '<b>Rate of change in 30-year mean aragonite saturation state<br>1995-2025 vs. 2020-2050 (&Delta;<sub>&Omega;<sub>ar</sub></sub>)</b>';
    div.innerHTML += '<p class="disclaimer">Worsening ocean acidification is projected as a long-term decline in aragonite saturation state</p>';
    div.innerHTML += '<div class="infoWatershed"><div class="updateWatershed"></div></div>';
    div.innerHTML += '<i style="background: ' + exposureColors[4] + '; opacity: 0.5;"></i><p><= -0.26</p>';
    div.innerHTML += '<i style="background: ' + exposureColors[3] + '; opacity: 0.5;"></i><p><= -0.23</p>';
    div.innerHTML += '<i style="background: ' + exposureColors[2] + '; opacity: 0.5"></i><p><= -0.22</p>';
    div.innerHTML += '<i style="background: ' + exposureColors[1] + '; opacity: 0.5"></i><p><= -0.21</p>';
    div.innerHTML += '<i style="background: ' + exposureColors[0] + '; opacity: 0.5"></i><p><= -0.19</p>';
    return div;
};

/* DYNAMIC SVG GRAPHS */

// Initialize SVG width and height based on viewing window size
function setWidth(window) {  // width of all charts
    var width = $(window).width() * 0.325;  // large
    if ($(window).width() < 1920 && $(window).width() > 1024) { width = $(window).width() * 0.3; }  // medium
    else if ($(window).width() <= 1024) { width = $(window).width() * 0.9; }  // small
    return width;
};
function setHeight(window) {  // height of date chart
    var height = $(window).height() * 0.195;  // large
    if ($(window).height() < 1280 && $(window).height() > 857) { height = $(window).height() * 0.225; }  // medium
    else if ($(window).height() <= 857) { height = $(window).height() * 0.33; }  // small
    else if ($(window).height() >= 2000) { height = $(window).height() * 0.225; }  // x-large
    return height;
};
function setBarHeight(window) {  // height of intensity & frequency bar charts
    var height = $(window).height() * 0.195;  // large
    var intFreqHeight = height;
    if ($(window).height() < 1280 && $(window).height() > 857) { height = $(window).height() * 0.225; intFreqHeight = height * 0.5; }  // medium
    else if ($(window).height() <= 857) { height = $(window).height() * 0.33; intFreqHeight = height * 0.4; }  // small
    else if ($(window).height() >= 2000) { height = $(window).height() * 0.5; intFreqHeight = height * 0.45; }  // x-large
    return intFreqHeight;
};

// Species responses by life stage
d3.csv("assets/data/species.csv").then(d => chart(d))

function chart(data) {

	var keys = data.columns.slice(1);

	var parseTime = d3.timeParse("%Y%m%d"),
		formatDate = d3.timeFormat("%Y-%m-%d"),
		bisectDate = d3.bisector(d => d.omega_arag).left,
		formatValue = d3.format(",.0f"),
		formatFloat = d3.format(".1f");

	data.forEach(function(d) {
		d.date = parseTime(d.date);
		d.omega_arag = formatFloat(d.omega_arag);
		return d;
	});

	var width = setWidth(window);
	var height = setHeight(window);

	var svg = d3.select("#species-response-chart")
	    .attr("width", width)
	    .attr("height", height),
		margin = {
		    top: 15,
		    right: 10,
		    bottom: 15,
		    left: 40
		},
		width = +svg.attr("width"),
		height = +svg.attr("height") - margin.top - margin.bottom;

	var x = d3.scaleLinear()
		.rangeRound([margin.left, width - margin.right])
		.domain(d3.extent(data, d => d.omega_arag))
		.range([width - margin.right, margin.left]);

	var y = d3.scaleLinear()
		.rangeRound([height - margin.bottom, margin.top]);

	var z = d3.scaleOrdinal(d3.schemePaired);

	var line = d3.line()
		.curve(d3.curveCardinal)
		.x(d => x(d.omega_arag))
		.y(d => y(d.response));

	svg.append("g")
		.attr("class","x-axis")
		.attr("transform", "translate(0, " + (height - margin.bottom) + ")")
		.call(d3.axisBottom(x).tickFormat(d3.format(".1f")));
	svg.append("text")
      .attr("transform", "translate(" + (width / 2) + ", " + (height + margin.top + 10) + ")")
      .style("text-anchor", "middle")
      .text("Aragonite saturation state");
	svg.append("g")
		.attr("class", "y-axis")
		.attr("transform", "translate(" + margin.left + ", 0)");
	svg.append("text")
		  .attr("transform", "rotate(-90)")
		  .attr("y", -2)
		  .attr("x", 0 - (height / 2))
		  .attr("dy", "1em")
		  .style("text-anchor", "middle")
		  .text("Growth (% change from pre-industrial)");
    // Create line at calculated mean aragonite within spatiotemporal filter
	var mean_arag = svg.append("g")
		.attr("class", "focus")
		.style("display", "block");
	mean_arag.append("line").attr("class", "lineHover")
		.style("stroke", "#ff8000")
		.attr("stroke-width", 3)
		.style("shape-rendering", "crispEdges")
		.style("opacity", 0.5)
		.attr("y1", -height)
		.attr("y2", 0);
    // Create line where mouse hovers over species response chart overlay
	var focus = svg.append("g")
		.attr("class", "focus")
		.style("display", "none");
	focus.append("line").attr("class", "lineHover")
		.style("stroke", "#ffffff")
		.attr("stroke-width", 3)
		.style("shape-rendering", "crispEdges")
		.style("opacity", 0.5)
		.attr("y1", -height)
		.attr("y2", 0);
	focus.append("text").attr("class", "lineHoverArag")
		.attr("text-anchor", "middle")
		.attr("font-size", 12);
    // Create overlay on species response chart
	var overlay = svg.append("rect")
		.attr("class", "overlay")
		.attr("x", margin.left)
		.attr("width", width - margin.right - margin.left)
		.attr("height", height);

	update(d3.select('#selectbox').property('value'), 0);

	function update(input, speed) {

		var copy = keys.filter(f => f.includes(input));

		var species_all = copy.map(function(id) {
			return {
				id: id,
				values: data.map(d => { return { omega_arag: d.omega_arag, response: +d[id] } })
			};
		});

		y.domain([
			d3.min(species_all, d => d3.min(d.values, c => c.response)),
			d3.max(species_all, d => d3.max(d.values, c => c.response))
		]).nice();

		svg.selectAll(".y-axis").transition()
			.duration(speed)
			.call(d3.axisLeft(y).tickSize(-width + margin.right + margin.left));

		var species = svg.selectAll(".species_all")
			.data(species_all);

		species.exit().remove();

        // Lines for species response curves
		species.enter().insert("g", ".focus").append("path")
			.attr("class", "line species_all")
			.style("stroke", d => z(d.id))
            .style("stroke-width", 3)
			.merge(species)
		    .transition().duration(speed)
			.attr("d", d => line(d.values));

		tooltip(copy);
	};

	function tooltip(copy) {

		var labels = focus.selectAll(".lineHoverText")
			.data(copy);
		labels.enter().append("text")
			.attr("class", "lineHoverText")
			.style("fill", d => z(d))
			.attr("text-anchor", "start")
			.attr("font-size", 12)
			.attr("dy", (_, i) => 1 + i * 2 + "em")
			.merge(labels);

		var circles = focus.selectAll(".hoverCircle")
			.data(copy);
		circles.enter().append("circle")
			.attr("class", "hoverCircle")
			.style("fill", d => z(d))
			.attr("r", 3)
			.merge(circles);

        // Have an overlay line appear and disappear over the species response curves on mouseover/mouseout
		svg.selectAll(".overlay")
			.on("mouseover", function() { focus.style("display", null); })
			.on("mouseout", function() { focus.style("display", "none"); })
			.on("mousemove", mousemove);

        // Function to display data values (y) respective to mouse hover location (x)
		function mousemove() {

			var x0 = x.invert(d3.mouse(this)[0]),
				i = bisectDate(data, x0, 1),
				d0 = data[i - 1],
				d1 = data[i],
				d = x0 - d0.omega_arag > d1.omega_arag - x0 ? d1 : d0;

			focus.select(".lineHover")
				.attr("transform", "translate(" + x(d.omega_arag) + "," + height + ")");
			focus.select(".lineHoverArag")
				.attr("transform",
					"translate(" + x(d.omega_arag) + "," + (height + margin.bottom) + ")")
				.text(d.omega_arag);
            // Circles move along data values at the mouse hover event location, i.e. y(d[e])
			focus.selectAll(".hoverCircle")
				.attr("cy", e => y(d[e]))
				.attr("cx", x(d.omega_arag));
			// Display data headings and values on overlay hover line
			focus.selectAll(".lineHoverText")
				.attr("transform", "translate(" + (x(d.omega_arag)) + ", " + height / 2.5 + ")")
				.text(e => e.split("_")[1].split('-').join(' ') + ": " + formatValue(d[e]) + "%");
            // Set spacing of hover text from hover line
			x(d.omega_arag) > (width - width / 4)
				? focus.selectAll("text.lineHoverText")
					.attr("text-anchor", "end")
					.attr("dx", -7.5)
				: focus.selectAll("text.lineHoverText")
					.attr("text-anchor", "start")
					.attr("dx", 7.5);
		};
	};

	var selectbox = d3.select("#selectbox")
		.on("change", function() {
			update(this.value, 500);
		});

    // Multi-coordinated view geovisualization
    var arag_events = d3.json('assets/data/omega_arag_hotspots.geojson').then(function(data) {

        var filter = crossfilter(data.features);

        var all = filter.groupAll();

        var everything = filter.dimension(function(d) {
            return d;
        });

        var geomDimension = filter.dimension(function(d) {
            return d.geometry;
        });

        // Intensity dimension: mean aragonite saturation state of OA hot spots
        var intDimension = filter.dimension(function(d) {
            var int = d.properties.i;  // aragonite saturation state
            return (int >= 0.95 && int < 1.12) ? '1.12 - 0.95' :
                (int >= 1.12 && int < 1.20) ? '1.20 - 1.12' :
                    (int >= 1.20 && int < 1.27) ? '1.27 - 1.20' :
                        (int >= 1.27 && int < 1.33) ? '1.33 - 1.27' :
                            '1.40 - 1.33';
        });

        // Frequency of passing the aragonite saturation state threshold (months/yr)
        var freqDimension = filter.dimension(function(d) {
            var freq = d.properties.f;
            return freq <= 3 ? '0 - 3' :
                freq <= 4 && freq < 7 ? '4 - 6' :
                    freq <= 7 && freq < 10 ? '7 - 9' :
                            '10 - 12';
        });

        // Time when aragonite saturation state threshold is first reached (omega <= 1.4)
        var dateDimension = filter.dimension(function(d) {
            return d3.timeDay(new Date(d.properties.t));
        });

        var intDimensionGroup = intDimension.group();

        var freqDimensionGroup = freqDimension.group();

        var dateDimensionGroup = dateDimension.group();

        // Set function for color ramp
        var aragColors = chroma.scale('Oranges').mode('lab').colors(5);

        function setColorDeltaArag(arag_start, arag_end) {
            var roc_arag = (arag_end - arag_start).toFixed(4);
            var id = 0;
            if (roc_arag < -0.2390 && roc_arag >= -0.2663) { id = 4; }
            else if (roc_arag < -0.2282 && roc_arag >= -0.2390) { id = 3; }
            else if (roc_arag < -0.2171 && roc_arag >= -0.2282) { id = 2; }
            else if (roc_arag < -0.2040 && roc_arag >= -0.2171) { id = 1; }
            else  { id = 0; }  // (roc_arag < -0.18 && roc_arag >= -0.2040)
            return aragColors[id];
        };

        function setColorArag(arag) {
            var id = 0;
            if (arag < 1.12) { id = 4; }
            else if (arag < 1.20 && arag >= 1.12) { id = 3; }
            else if (arag < 1.27 && arag >= 1.20) { id = 2; }
            else if (arag < 1.33 && arag >= 1.27) { id = 1; }
            else  { id = 0; }  // (arag < 1.40 && arag >= 1.33)
            return aragColors[id];
        };

        function calcPropRadius(attributeValue) {
		    var scaleFactor = 32;
		    var area = attributeValue * scaleFactor;
		    return Math.sqrt(area / Math.PI) * 2;
        };

        var circleRadius = 1;

        function circleStyle(feature) {
            return {
                    radius: calcPropRadius(feature.properties.f) * circleRadius,
                    fillColor: setColorArag(feature.properties.i),
                    fillOpacity: 0.3,
                    weight: 5,
                    color: "#ff8000",
                    opacity: 0,
                    stroke: false,
                };
        };

        var geoJsonLayer = L.geoJson({
            type: 'FeatureCollection',
            features: geomDimension.top(Infinity)
        }, {
            pointToLayer: function(feature, latlng) {
                return L.circleMarker(latlng, circleStyle(feature));
            },
            onEachFeature: function(feature, layer) {
                layer.bindTooltip("&Omega; Aragonite: " + feature.properties.i.toString() +
                                    '<br>' + 'Projected: ' + feature.properties.t.toString(), {className: 'aragTooltip'});
            }
            }).addTo(map);

        // Intensity chart for OA hot spots mean aragonite saturation state
        var intChart = dc.barChart('#int-chart');
        // Define the order of bar chart x-axis break points when strings are used for axis labels
        var intOrder = [
          {range: "1.40 - 1.33", order: 0},
          {range: "1.33 - 1.27", order: 1},
          {range: "1.27 - 1.20", order: 2},
          {range: "1.20 - 1.12", order: 3},
          {range: "1.12 - 0.95", order: 4}
        ];
        var sortByOrderInt = intOrder.sort(function (a, b) { return a.order < b.order; });
        var int_ranges = sortByOrderInt.map(function (d) { return d.range; });
        intChart
            .width(setWidth(window))
            .height(setBarHeight(window))
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(intDimension)
            .group(intDimensionGroup)
            .elasticY(true)
            .x(d3.scaleBand().domain(int_ranges))
            .xUnits(dc.units.ordinal)
            .yAxis()
            .ticks(3);

        // Frequency chart for OA hot spots months per year
        var freqChart = dc.barChart('#freq-chart');
        // Define the order of bar chart x-axis break points when strings are used for axis labels
        var freqOrder = [
          {range: "1 - 3", order: 0},
          {range: "4 - 6", order: 1},
          {range: "7 - 9", order: 2},
          {range: "10 - 12", order: 3}
        ];
        var sortByOrderFreq = freqOrder.sort(function (a, b) { return a.order < b.order; });
        var freq_ranges = sortByOrderFreq.map(function (d) { return d.range; });
        freqChart
            .width(setWidth(window))
            .height(setBarHeight(window))
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(freqDimension)
            .group(freqDimensionGroup)
            .elasticY(true)
            .x(d3.scaleBand().domain(freq_ranges))
            .xUnits(dc.units.ordinal)
            .yAxis()
            .ticks(3);

        // Date chart for OA hot spots count per year
        var dateChart = dc.lineChart('#date-chart');
            dateChart
            .renderArea(true)
            .height(setHeight(window))
            .width(setWidth(window))
            .transitionDuration(1000)
            .margins({
                top: 10,
                right: 10,
                bottom: 40,
                left: 40
            })
            .dimension(dateDimension)
            .group(dateDimensionGroup)
            .elasticY(true)
            .x(d3.scaleTime().domain([new Date(1994, 1), new Date(2050, 12)]))
            .xUnits(d3.timeYears)
            .yAxis()
            .tickFormat(d3.format("d"));

        dc.renderAll();

        // Update dynamic charts by data present within map bounds
        function updateMapFilter() {
            geomDimension.filter(function(d) {
                return map.getBounds().contains(L.geoJSON(d).getBounds());
            });
            dc.redrawAll();
        };
        // Update map features
        function updateMap() {
            geoJsonLayer.clearLayers();
            geoJsonLayer.addData({
                type: 'FeatureCollection',
                features: everything.top(Infinity)
            });
        };

        // Calculate average of all filtered points' values for 30-year mean aragonite saturation state at end of series
        function calcMeanArag() {
            var total_hotspots = all.value();
            var arag_values = [];
            for (var i in geoJsonLayer._layers) {
                arag_values.push(geoJsonLayer._layers[i].feature.properties.i);
            }
            var arrAvg = arag_values.reduce((a,b) => a + b, 0) / arag_values.length;
            mean_arag.select(".lineHover")
                .attr("transform", "translate(" + x(arrAvg) + "," + height + ")");

            mean_arag.select(".lineHoverArag")
                .attr("transform",
                    "translate(" + x(arrAvg) + "," + (height + margin.bottom) + ")");
            return arrAvg;  // calculated mean
        };

        function adjustCircleRadius() {
            var currentZoom = map.getZoom();
            if (currentZoom == 10) { circleRadius = 1.25; }
            else if (currentZoom == 11) { circleRadius = 2; }
            else if (currentZoom > 11 && currentZoom < 13) { circleRadius = 4; }
            else if (currentZoom >= 13 && currentZoom < 14) { circleRadius = 8; }
            else if (currentZoom >= 14 && currentZoom < 15) { circleRadius = 16; }
            else if (currentZoom >= 15 && currentZoom < 23) { circleRadius = 32; }
            else { circleRadius = 1; }
            return circleRadius;
        };

        // Update filtered data and calculate mean intensity & proportional circle size whenever map is panned or zoomed
        map.on('zoomend moveend', function() {
            updateMapFilter();
            updateMap();
            calcMeanArag();
            circleRadius = adjustCircleRadius();
            geoJsonLayer.setStyle(circleStyle);
        });

        intChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

        freqChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

        dateChart.on('filtered', function(chart, filter) {
            updateMap();
            calcMeanArag();
        });

    });

    var stakeholders = L.geoJson.ajax('assets/data/stakeholders.geojson', {
        pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
                radius: 40,
                fillColor: "#738D2B",
                color: "#000",
                weight: 1,
                stroke: false,
                opacity: 0.01,
                fillOpacity: 0.1
            });
        }
    });

    var projects = L.geoJson.ajax('assets/data/oah_projects.geojson', {
        pointToLayer: function (feature, latlng) {
            return L.circleMarker(latlng, {
                radius: 40,
                fillColor: "#08048d",
                color: "#000",
                weight: 1,
                stroke: false,
                opacity: 0.01,
                fillOpacity: 0.04
            });
        },
        onEachFeature: function (feature, layer) {
            layer.bindTooltip(feature.properties.project, { sticky: true, className: "feature-tooltip" });
        }
    });

    // Layer control
    var watersheds_exposure_ROC_layer = L.layerGroup([watersheds_exposure_ROC]);
    var vulnWatersheds = L.layerGroup([vulnerability]);
    var stakeholder_groups = L.layerGroup([stakeholders]);
    var ac_projects = L.layerGroup([projects]);

    var base_maps = {
        "Shellfish": mapbox_shellfish,
        "Satellite": mapbox_satellite
    };

    var vulnerability_layers = {
        "Exposure": watersheds_exposure_ROC_layer,
        "Sensitivity": stakeholder_groups,
        "Adaptive Capacity": ac_projects,
        "Combined Vulnerability": vulnWatersheds
    };

    L.control.layers(base_maps, vulnerability_layers, {
        position: 'topright',
        collapsed: true
    }).addTo(map);

    map.on('overlayadd', function (eventLayer) {
        if (eventLayer.name === 'Exposure') {  // add legend
            exposureROClegend.addTo(this);
        }
    });

    map.on('overlayremove', function(eventLayer) {
        if (eventLayer.name === 'Exposure') {  // remove legend
            map.removeControl(exposureROClegend);
        }
    });

    $(document).ready(function() {
        $(".info").hide();
    });

    $("#sidenavToggler").click(function() {
        $(this).toggleClass("sidenavToggler-right-border");
        $("div .dc-chart").toggleClass("dc-hide");
        $(".dc").toggleClass("dc-hide");
    });

    $(".navbar-toggler-icon").click(function() {
        $(".leaflet-control-layers").toggleClass("dc-hide");
        $(".explain").toggleClass("dc-hide");
    });

    $('.dc-chart svg').ready(function() {
        setTimeout(function() {
            $('.dc').css("display", "block");
        }, 50);
    });

};
